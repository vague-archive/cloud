import { assert, Test } from "@test"
import { is } from "@lib"

const date = new Date()
const datetime = DateTime.now()
const bytes = new Uint8Array([1, 2, 3, 4, 5])

//-----------------------------------------------------------------------------

Test("is.present", () => {
  assert.equals(is.present(null), false)
  assert.equals(is.present(undefined), false)
  assert.equals(is.present(true), true)
  assert.equals(is.present(false), true)
  assert.equals(is.present(NaN), true)
  assert.equals(is.present(0), true)
  assert.equals(is.present(3.14), true)
  assert.equals(is.present(42), true)
  assert.equals(is.present(-42), true)
  assert.equals(is.present(0n), true)
  assert.equals(is.present(42n), true)
  assert.equals(is.present(-42n), true)
  assert.equals(is.present("eggs"), true)
  assert.equals(is.present("bacon"), true)
  assert.equals(is.present(date), true)
  assert.equals(is.present(datetime), true)
  assert.equals(is.present([]), true)
  assert.equals(is.present([1, 2, 3]), true)
  assert.equals(is.present(["foo", "bar"]), true)
  assert.equals(is.present({}), true)
  assert.equals(is.present({ foo: "bar" }), true)
  assert.equals(is.present(() => 42), true)
  assert.equals(is.present(bytes), true)
})

//-----------------------------------------------------------------------------

Test("is.object", () => {
  assert.equals(is.object(null), false)
  assert.equals(is.object(undefined), false)
  assert.equals(is.object(true), false)
  assert.equals(is.object(false), false)
  assert.equals(is.object(NaN), false)
  assert.equals(is.object(0), false)
  assert.equals(is.object(3.14), false)
  assert.equals(is.object(42), false)
  assert.equals(is.object(-42), false)
  assert.equals(is.object(0n), false)
  assert.equals(is.object(42n), false)
  assert.equals(is.object(-42n), false)
  assert.equals(is.object("eggs"), false)
  assert.equals(is.object("bacon"), false)
  assert.equals(is.object(date), false)
  assert.equals(is.object(datetime), false)
  assert.equals(is.object([]), false)
  assert.equals(is.object([1, 2, 3]), false)
  assert.equals(is.object(["foo", "bar"]), false)
  assert.equals(is.object({}), true)
  assert.equals(is.object({ foo: "bar" }), true)
  assert.equals(is.object(() => 42), false)
  assert.equals(is.object(bytes), false)
})

//-----------------------------------------------------------------------------

Test("is.array", () => {
  assert.equals(is.array(null), false)
  assert.equals(is.array(undefined), false)
  assert.equals(is.array(true), false)
  assert.equals(is.array(false), false)
  assert.equals(is.array(NaN), false)
  assert.equals(is.array(0), false)
  assert.equals(is.array(3.14), false)
  assert.equals(is.array(42), false)
  assert.equals(is.array(-42), false)
  assert.equals(is.array(0n), false)
  assert.equals(is.array(42n), false)
  assert.equals(is.array(-42n), false)
  assert.equals(is.array("eggs"), false)
  assert.equals(is.array("bacon"), false)
  assert.equals(is.array(date), false)
  assert.equals(is.array(datetime), false)
  assert.equals(is.array([]), true)
  assert.equals(is.array([1, 2, 3]), true)
  assert.equals(is.array(["foo", "bar"]), true)
  assert.equals(is.array({}), false)
  assert.equals(is.array({ foo: "bar" }), false)
  assert.equals(is.array(() => 42), false)
  assert.equals(is.array(bytes), false)
})

//-----------------------------------------------------------------------------

Test("is.string", () => {
  assert.equals(is.string(null), false)
  assert.equals(is.string(undefined), false)
  assert.equals(is.string(true), false)
  assert.equals(is.string(false), false)
  assert.equals(is.string(NaN), false)
  assert.equals(is.string(0), false)
  assert.equals(is.string(3.14), false)
  assert.equals(is.string(42), false)
  assert.equals(is.string(-42), false)
  assert.equals(is.string(0n), false)
  assert.equals(is.string(42n), false)
  assert.equals(is.string(-42n), false)
  assert.equals(is.string("eggs"), true)
  assert.equals(is.string("bacon"), true)
  assert.equals(is.string(date), false)
  assert.equals(is.string(datetime), false)
  assert.equals(is.string([]), false)
  assert.equals(is.string([1, 2, 3]), false)
  assert.equals(is.string(["foo", "bar"]), false)
  assert.equals(is.string({}), false)
  assert.equals(is.string({ foo: "bar" }), false)
  assert.equals(is.string(() => 42), false)
  assert.equals(is.string(bytes), false)
})

//-----------------------------------------------------------------------------

Test("is.number", () => {
  assert.equals(is.number(null), false)
  assert.equals(is.number(undefined), false)
  assert.equals(is.number(true), false)
  assert.equals(is.number(false), false)
  assert.equals(is.number(NaN), false)
  assert.equals(is.number(0), true)
  assert.equals(is.number(3.14), true)
  assert.equals(is.number(42), true)
  assert.equals(is.number(-42), true)
  assert.equals(is.number(0n), false)
  assert.equals(is.number(42n), false)
  assert.equals(is.number(-42n), false)
  assert.equals(is.number("eggs"), false)
  assert.equals(is.number("bacon"), false)
  assert.equals(is.number(date), false)
  assert.equals(is.number(datetime), false)
  assert.equals(is.number([]), false)
  assert.equals(is.number([1, 2, 3]), false)
  assert.equals(is.number(["foo", "bar"]), false)
  assert.equals(is.number({}), false)
  assert.equals(is.number({ foo: "bar" }), false)
  assert.equals(is.number(() => 42), false)
  assert.equals(is.number(bytes), false)
})

//-----------------------------------------------------------------------------

Test("is.bigint", () => {
  assert.equals(is.bigint(null), false)
  assert.equals(is.bigint(undefined), false)
  assert.equals(is.bigint(true), false)
  assert.equals(is.bigint(false), false)
  assert.equals(is.bigint(NaN), false)
  assert.equals(is.bigint(0), false)
  assert.equals(is.bigint(3.14), false)
  assert.equals(is.bigint(42), false)
  assert.equals(is.bigint(-42), false)
  assert.equals(is.bigint(0n), true)
  assert.equals(is.bigint(42n), true)
  assert.equals(is.bigint(-42n), true)
  assert.equals(is.bigint("eggs"), false)
  assert.equals(is.bigint(date), false)
  assert.equals(is.bigint(datetime), false)
  assert.equals(is.bigint("bacon"), false)
  assert.equals(is.bigint([]), false)
  assert.equals(is.bigint([1, 2, 3]), false)
  assert.equals(is.bigint(["foo", "bar"]), false)
  assert.equals(is.bigint({}), false)
  assert.equals(is.bigint({ foo: "bar" }), false)
  assert.equals(is.bigint(() => 42), false)
  assert.equals(is.bigint(bytes), false)
})

//-----------------------------------------------------------------------------

Test("is.date", () => {
  assert.equals(is.date(null), false)
  assert.equals(is.date(undefined), false)
  assert.equals(is.date(true), false)
  assert.equals(is.date(false), false)
  assert.equals(is.date(NaN), false)
  assert.equals(is.date(0), false)
  assert.equals(is.date(3.14), false)
  assert.equals(is.date(42), false)
  assert.equals(is.date(-42), false)
  assert.equals(is.date(0n), false)
  assert.equals(is.date(42n), false)
  assert.equals(is.date(-42n), false)
  assert.equals(is.date("eggs"), false)
  assert.equals(is.date("bacon"), false)
  assert.equals(is.date(date), true)
  assert.equals(is.date(datetime), false)
  assert.equals(is.date([]), false)
  assert.equals(is.date([1, 2, 3]), false)
  assert.equals(is.date(["foo", "bar"]), false)
  assert.equals(is.date({}), false)
  assert.equals(is.date({ foo: "bar" }), false)
  assert.equals(is.date(() => 42), false)
  assert.equals(is.date(bytes), false)
})

//-----------------------------------------------------------------------------

Test("is.datetime", () => {
  assert.equals(is.datetime(null), false)
  assert.equals(is.datetime(undefined), false)
  assert.equals(is.datetime(true), false)
  assert.equals(is.datetime(false), false)
  assert.equals(is.datetime(NaN), false)
  assert.equals(is.datetime(0), false)
  assert.equals(is.datetime(3.14), false)
  assert.equals(is.datetime(42), false)
  assert.equals(is.datetime(-42), false)
  assert.equals(is.datetime(0n), false)
  assert.equals(is.datetime(42n), false)
  assert.equals(is.datetime(-42n), false)
  assert.equals(is.datetime("eggs"), false)
  assert.equals(is.datetime("bacon"), false)
  assert.equals(is.datetime(date), false)
  assert.equals(is.datetime(datetime), true)
  assert.equals(is.datetime([]), false)
  assert.equals(is.datetime([1, 2, 3]), false)
  assert.equals(is.datetime(["foo", "bar"]), false)
  assert.equals(is.datetime({}), false)
  assert.equals(is.datetime({ foo: "bar" }), false)
  assert.equals(is.datetime(() => 42), false)
  assert.equals(is.datetime(bytes), false)
})

//-----------------------------------------------------------------------------

Test("is.bytes", () => {
  assert.equals(is.bytes(null), false)
  assert.equals(is.bytes(undefined), false)
  assert.equals(is.bytes(true), false)
  assert.equals(is.bytes(false), false)
  assert.equals(is.bytes(NaN), false)
  assert.equals(is.bytes(0), false)
  assert.equals(is.bytes(3.14), false)
  assert.equals(is.bytes(42), false)
  assert.equals(is.bytes(-42), false)
  assert.equals(is.bytes(0n), false)
  assert.equals(is.bytes(42n), false)
  assert.equals(is.bytes(-42n), false)
  assert.equals(is.bytes("eggs"), false)
  assert.equals(is.bytes("bacon"), false)
  assert.equals(is.bytes(date), false)
  assert.equals(is.bytes(datetime), false)
  assert.equals(is.bytes([]), false)
  assert.equals(is.bytes([1, 2, 3]), false)
  assert.equals(is.bytes(["foo", "bar"]), false)
  assert.equals(is.bytes({}), false)
  assert.equals(is.bytes({ foo: "bar" }), false)
  assert.equals(is.bytes(() => 42), false)
  assert.equals(is.bytes(bytes), true)
})

//-----------------------------------------------------------------------------
